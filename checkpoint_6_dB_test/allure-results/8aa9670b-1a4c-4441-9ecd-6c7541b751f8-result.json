{"name": "test_relation_with_parent", "status": "broken", "statusDetails": {"message": "mysql.connector.errors.OperationalError: MySQL Connection not available.", "trace": "db_connection = <mysql.connector.connection_cext.CMySQLConnection object at 0x105f061c0>\n\n    @allure.story('Проверка целостности данных - наличие связанных записей в родительской таблице')\n    def test_relation_with_parent(db_connection):\n        with db_connection as connection:\n>           cursor = connection.cursor()\n\ntest_db.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mysql.connector.connection_cext.CMySQLConnection object at 0x105f061c0>, buffered = None, raw = None, prepared = None, cursor_class = None, dictionary = None, named_tuple = None\n\n    def cursor(\n        self,\n        buffered: Optional[bool] = None,\n        raw: Optional[bool] = None,\n        prepared: Optional[bool] = None,\n        cursor_class: Optional[Type[CMySQLCursor]] = None,\n        dictionary: Optional[bool] = None,\n        named_tuple: Optional[bool] = None,\n    ) -> CMySQLCursor:\n        \"\"\"Instantiates and returns a cursor using C Extension\n    \n        By default, CMySQLCursor is returned. Depending on the options\n        while connecting, a buffered and/or raw cursor is instantiated\n        instead. Also depending upon the cursor options, rows can be\n        returned as dictionary or named tuple.\n    \n        Dictionary and namedtuple based cursors are available with buffered\n        output but not raw.\n    \n        It is possible to also give a custom cursor through the\n        cursor_class parameter, but it needs to be a subclass of\n        mysql.connector.cursor_cext.CMySQLCursor.\n    \n        Raises ProgrammingError when cursor_class is not a subclass of\n        CursorBase. Raises ValueError when cursor is not available.\n    \n        Returns instance of CMySQLCursor or subclass.\n    \n        :param buffered: Return a buffering cursor\n        :param raw: Return a raw cursor\n        :param prepared: Return a cursor which uses prepared statements\n        :param cursor_class: Use a custom cursor class\n        :param dictionary: Rows are returned as dictionary\n        :param named_tuple: Rows are returned as named tuple\n        :return: Subclass of CMySQLCursor\n        :rtype: CMySQLCursor or subclass\n        \"\"\"\n        self.handle_unread_result(prepared)\n        if not self.is_connected():\n>           raise OperationalError(\"MySQL Connection not available.\")\nE           mysql.connector.errors.OperationalError: MySQL Connection not available.\n\n../../../../Library/Python/3.9/lib/python/site-packages/mysql/connector/connection_cext.py:706: OperationalError"}, "start": 1698520658533, "stop": 1698520658533, "uuid": "720a046c-3c7b-406c-9081-3c904fba1988", "historyId": "bce98599bc68af96981999f27ee3b047", "testCaseId": "bce98599bc68af96981999f27ee3b047", "fullName": "test_db#test_relation_with_parent", "labels": [{"name": "story", "value": "Проверка целостности данных - наличие связанных записей в родительской таблице"}, {"name": "suite", "value": "test_db"}, {"name": "host", "value": "alexMBP-14.local"}, {"name": "thread", "value": "6088-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_db"}]}